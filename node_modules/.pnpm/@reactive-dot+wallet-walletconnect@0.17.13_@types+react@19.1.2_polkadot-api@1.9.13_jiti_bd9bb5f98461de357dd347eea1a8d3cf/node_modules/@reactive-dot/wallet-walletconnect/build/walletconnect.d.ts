import { DeepLinkWallet, type PolkadotSignerAccount } from "@reactive-dot/core/wallets.js";
import type { WalletConnectModalConfig } from "@walletconnect/modal";
import type { UniversalProviderOpts } from "@walletconnect/universal-provider";
export declare class WalletConnect extends DeepLinkWallet {
    #private;
    readonly id = "wallet-connect";
    readonly name = "WalletConnect";
    constructor(options: {
        projectId?: string;
        providerOptions: Omit<UniversalProviderOpts, "projectId">;
        modalOptions?: Omit<WalletConnectModalConfig, "projectId">;
        chainIds?: string[];
        optionalChainIds?: string[];
    });
    initialize(): Promise<void>;
    readonly connected$: import("rxjs").Observable<boolean>;
    initiateConnectionHandshake(): Promise<{
        uri: string;
        settled: Promise<void>;
    }>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    readonly accounts$: import("rxjs").Observable<PolkadotSignerAccount[]>;
}
//# sourceMappingURL=walletconnect.d.ts.map