var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { generatePolkadotIcon } from "./icon.js";
import { css, html, LitElement, svg } from "lit";
import { customElement, property } from "lit/decorators.js";
let PolkadotIdenticon = class PolkadotIdenticon extends LitElement {
    constructor() {
        super(...arguments);
        this.size = 24;
        this.backgroundColor = "transparent";
    }
    static { this.styles = css `
    button {
      cursor: copy;
    }
  `; }
    render() {
        const circles = generatePolkadotIcon(this.address, {
            backgroundColor: this.backgroundColor,
        });
        return html `<svg
      name=${this.address}
      width=${this.size}
      height=${this.size}
      viewBox="0 0 64 64"
    >
      ${circles.map(({ cx, cy, r, fill }) => svg `<circle cx=${cx} cy=${cy} r=${r} fill=${fill} />`)}
    </svg>`;
    }
};
__decorate([
    property()
], PolkadotIdenticon.prototype, "address", void 0);
__decorate([
    property()
], PolkadotIdenticon.prototype, "size", void 0);
__decorate([
    property()
], PolkadotIdenticon.prototype, "backgroundColor", void 0);
PolkadotIdenticon = __decorate([
    customElement("polkadot-identicon")
], PolkadotIdenticon);
export { PolkadotIdenticon };
//# sourceMappingURL=polkadot-identicon.js.map