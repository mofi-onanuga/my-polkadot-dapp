var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { users as usersIcon, wallet as walletIcon, wallets as walletsIcon, } from "../icons/index.js";
import { observableSignal } from "../observable-signal.js";
import { accounts$, connectedWallets$ } from "../stores.js";
import { DotConnectElement } from "./components/element.js";
import "./connection-dialog.js";
import { signal } from "@lit-labs/preact-signals";
import { css, html } from "lit";
import { customElement } from "lit/decorators.js";
let ConnectionButton = class ConnectionButton extends DotConnectElement {
    static { this.styles = [
        super.styles,
        css `
      :host {
        font-size: 1.5em;
      }

      .icon {
        display: contents;
        > * {
          vertical-align: -0.125em;
        }
      }
    `,
    ]; }
    #dialogOpen = signal(false);
    #connectedWallets = observableSignal(this, connectedWallets$, []);
    #accounts = observableSignal(this, accounts$, []);
    render() {
        return html `
      <button part="button" @click=${() => (this.#dialogOpen.value = true)}>
        ${this.#connectedWallets.value.length > 0
            ? html `Connected | ${this.#connectedWallets.value.length}
              <span class="icon"
                >${this.#connectedWallets.value.length === 1
                ? walletIcon({ size: "1em" })
                : walletsIcon({ size: "1em" })}</span
              >
              ${this.#accounts.value.length}
              <span class="icon">${usersIcon({ size: "1em" })}</span>`
            : html `Connect
              <span class="icon">${walletsIcon({ size: "1em" })}</span>`}
      </button>
      <dc-connection-dialog
        ?open=${this.#dialogOpen.value}
        @close=${() => (this.#dialogOpen.value = false)}
      ></dc-connection-dialog>
    `;
    }
};
ConnectionButton = __decorate([
    customElement("dc-connection-button")
], ConnectionButton);
export { ConnectionButton };
//# sourceMappingURL=connection-button.js.map