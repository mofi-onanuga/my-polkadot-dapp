var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { genericChainSpec } from "../../const.js";
import { observableSignal } from "../../observable-signal.js";
import "../components/account-list-item.js";
import { DotConnectElement } from "../components/element.js";
import "./connected-ledger-accounts-dialog.js";
import { getAccounts } from "@reactive-dot/core/internal/actions.js";
import "dot-identicon";
import { css, html, nothing } from "lit";
import { customElement, property, state } from "lit/decorators.js";
import { ifDefined } from "lit/directives/if-defined.js";
import { repeat } from "lit/directives/repeat.js";
import { when } from "lit/directives/when.js";
import { of } from "rxjs";
let LedgerDialog = class LedgerDialog extends DotConnectElement {
    constructor() {
        super(...arguments);
        this.open = false;
        this.addDialogOpen = false;
        this.connectedAccounts = observableSignal(this, of([]), []);
    }
    updated(changedProperties) {
        if (changedProperties.has("wallet")) {
            this.connectedAccounts = observableSignal(this, getAccounts([this.wallet], genericChainSpec), []);
        }
    }
    static { this.styles = [
        super.styles,
        css `
      header {
        display: flex;
        justify-content: space-between;
        align-items: center;

        padding: 0 0.5rem 0.75rem 0.5rem;

        h3 {
          font-size: 0.8em;
        }
      }

      hr {
        margin-inline-start: 3.2rem;
        margin-inline-end: 0.5rem;
        border-top: 1px solid var(--color-on-surface);
        opacity: 0.25;
      }
    `,
    ]; }
    render() {
        return html `<dc-dialog
        ?open=${this.open}
        @close=${(event) => this.dispatchEvent(new Event(event.type, event))}
      >
        <span slot="title">Ledger</span>
        <section slot="content">
          <header>
            <h3>Connected accounts</h3>
            <button class="text" @click=${() => (this.addDialogOpen = true)}>
              Add more
            </button>
          </header>
          ${repeat(this.connectedAccounts.value, (account) => account.id, (account, index) => html `<dc-account-list-item
                  address=${account.address}
                  name=${ifDefined(account.name)}
                >
                  <button
                    slot="trailing"
                    class="error sm"
                    @click=${() => this.wallet.accountStore.delete(account)}
                  >
                    Remove
                  </button></dc-account-list-item
                >${this.connectedAccounts.value.length <= 1 ||
            index === this.connectedAccounts.value.length - 1
            ? nothing
            : html `<hr />`}`)}
        </section>
      </dc-dialog>
      ${when(this.addDialogOpen, () => html `<dc-connected-ledger-accounts-dialog
            open
            @close=${() => (this.addDialogOpen = false)}
            .wallet=${this.wallet}
          ></dc-connected-ledger-accounts-dialog>`)}`;
    }
};
__decorate([
    property({ type: Boolean })
], LedgerDialog.prototype, "open", void 0);
__decorate([
    property({ attribute: false })
], LedgerDialog.prototype, "wallet", void 0);
__decorate([
    state()
], LedgerDialog.prototype, "addDialogOpen", void 0);
__decorate([
    state()
], LedgerDialog.prototype, "connectedAccounts", void 0);
LedgerDialog = __decorate([
    customElement("dc-ledger-dialog")
], LedgerDialog);
export { LedgerDialog };
//# sourceMappingURL=ledger-dialog.js.map