var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ConnectedLedgerAccountsDialog_1;
import { logAndThrow } from "../../utils.js";
import { DotConnectElement } from "../components/element.js";
import "./connected-ledger-account-list-item.js";
import { Task } from "@lit/task";
import { css, html } from "lit";
import { customElement, property, state } from "lit/decorators.js";
let ConnectedLedgerAccountsDialog = class ConnectedLedgerAccountsDialog extends DotConnectElement {
    constructor() {
        super(...arguments);
        this.open = false;
        this.accountCount = ConnectedLedgerAccountsDialog_1.accountIncrement;
        this.#connectLedgerTask = new Task(this, {
            task: ([wallet]) => wallet === undefined
                ? Promise.withResolvers().promise
                : wallet.getConnectedAccount().catch(logAndThrow),
            args: () => [this.wallet],
            autoRun: false,
        });
    }
    static { ConnectedLedgerAccountsDialog_1 = this; }
    static { this.accountIncrement = 3; }
    #connectLedgerTask;
    willUpdate(changedProperties) {
        if (changedProperties.has("wallet")) {
            this.#connectLedgerTask.run();
        }
        if (changedProperties.has("open")) {
            if (this.open) {
                this.#connectLedgerTask.run();
                this.accountCount = ConnectedLedgerAccountsDialog_1.accountIncrement;
            }
        }
    }
    static { this.styles = [
        super.styles,
        css `
      p {
        text-align: center;
      }

      #retry-button,
      #load-more-button {
        margin-top: 0.5rem;
        width: 100%;
      }
    `,
    ]; }
    render() {
        return html `
      <dc-dialog
        ?open=${this.open}
        @close=${(event) => this.dispatchEvent(new Event(event.type, event))}
      >
        <span slot="title">Connectable accounts</span>
        <div slot="content">
          ${this.#connectLedgerTask.render({
            pending: () => html `<p>Connect your Ledger device to continue.</p>`,
            complete: () => html `
              ${Array.from({ length: this.accountCount }).map((_, index) => html `<dc-connected-ledger-account-list-item
                    .wallet=${this.wallet}
                    accountPath=${index}
                  ></dc-connected-ledger-account-list-item>`)}
              <button
                id="load-more-button"
                @click=${() => (this.accountCount +=
                ConnectedLedgerAccountsDialog_1.accountIncrement)}
              >
                Load more accounts
              </button>
            `,
            error: () => html `<p>Failed to connect Ledger device.</p>
                <button
                  id="retry-button"
                  @click=${() => this.#connectLedgerTask.run()}
                >
                  Try again
                </button>`,
        })}
        </div>
      </dc-dialog>
    `;
    }
};
__decorate([
    property({ type: Boolean })
], ConnectedLedgerAccountsDialog.prototype, "open", void 0);
__decorate([
    property({ attribute: false })
], ConnectedLedgerAccountsDialog.prototype, "wallet", void 0);
__decorate([
    state()
], ConnectedLedgerAccountsDialog.prototype, "accountCount", void 0);
ConnectedLedgerAccountsDialog = ConnectedLedgerAccountsDialog_1 = __decorate([
    customElement("dc-connected-ledger-accounts-dialog")
], ConnectedLedgerAccountsDialog);
export { ConnectedLedgerAccountsDialog };
//# sourceMappingURL=connected-ledger-accounts-dialog.js.map