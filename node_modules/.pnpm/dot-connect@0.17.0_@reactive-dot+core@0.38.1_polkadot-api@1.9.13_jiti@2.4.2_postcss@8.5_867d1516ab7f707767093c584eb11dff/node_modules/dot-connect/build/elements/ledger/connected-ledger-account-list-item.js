var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { genericChainSpec } from "../../const.js";
import { observableSignal } from "../../observable-signal.js";
import { logAndThrow } from "../../utils.js";
import { DotConnectElement } from "../components/element.js";
import { Task } from "@lit/task";
import { getAccounts } from "@reactive-dot/core/internal/actions.js";
import { css, html } from "lit";
import { customElement, property, state } from "lit/decorators.js";
import { AccountId } from "polkadot-api";
import { of } from "rxjs";
const genericAccountId = AccountId();
let ConnectedLedgerAccountListItem = class ConnectedLedgerAccountListItem extends DotConnectElement {
    constructor() {
        super(...arguments);
        this.connectedAccounts = observableSignal(this, of([]), []);
        this.#accountTask = new Task(this, {
            task: async ([wallet, path]) => wallet === undefined
                ? Promise.withResolvers().promise
                : wallet.getConnectedAccount(path).catch(logAndThrow),
            args: () => [this.wallet, this.accountPath],
        });
    }
    #accountTask;
    willUpdate(changedProperties) {
        if (changedProperties.has("open")) {
            this.#accountTask.run();
        }
    }
    updated(changedProperties) {
        if (changedProperties.has("wallet")) {
            this.connectedAccounts = observableSignal(this, getAccounts([this.wallet], genericChainSpec), []);
        }
    }
    static { this.styles = [
        super.styles,
        css `
      input[type="checkbox"] {
        pointer-events: none;
      }

      #loading-container {
        min-height: 3.125rem;
      }
    `,
    ]; }
    render() {
        return this.#accountTask.render({
            pending: () => html `<div id="loading-container">
          <dc-list-item pending>
            <span slot="headline">Fetching account...</span>
          </dc-list-item>
        </div>`,
            complete: (account) => {
                const name = `Ledger account ${this.accountPath + 1}`;
                const connected = this.connectedAccounts.value.some((connectedAccount) => connectedAccount.id === account.id);
                return html `<dc-account-list-item
          .address=${genericAccountId.dec(account.publicKey)}
          name=${name}
          type="checkbox"
          clickable
          ?checked=${connected}
          @change=${() => {
                    if (connected) {
                        this.wallet.accountStore.delete(account);
                    }
                    else {
                        this.wallet.accountStore.add({ ...account, name });
                    }
                }}
        ></dc-account-list-item>`;
            },
            error: () => html `<dc-list-item>
          <span slot="headline">Failed to load account</span>
          <button
            slot="trailing"
            class="xs"
            @click=${() => this.#accountTask.run()}
          >
            Retry
          </button>
        </dc-list-item>`,
        });
    }
};
__decorate([
    property({ attribute: false })
], ConnectedLedgerAccountListItem.prototype, "wallet", void 0);
__decorate([
    property({ type: Number })
], ConnectedLedgerAccountListItem.prototype, "accountPath", void 0);
__decorate([
    state()
], ConnectedLedgerAccountListItem.prototype, "connectedAccounts", void 0);
ConnectedLedgerAccountListItem = __decorate([
    customElement("dc-connected-ledger-account-list-item")
], ConnectedLedgerAccountListItem);
export { ConnectedLedgerAccountListItem };
//# sourceMappingURL=connected-ledger-account-list-item.js.map