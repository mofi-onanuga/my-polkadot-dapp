import type { InjectedWalletInfo, WalletConfig } from "../wallets/types.js";
import "./components/dialog.js";
import { DotConnectElement } from "./components/element.js";
import "./components/list-item.js";
import "./components/qr-code.js";
import "./ledger/connected-ledger-accounts-dialog.js";
import "./ledger/ledger-dialog.js";
import { DeepLinkWallet, type PolkadotSignerAccount, type Wallet } from "@reactive-dot/core/wallets.js";
import type { LedgerWallet } from "@reactive-dot/wallet-ledger";
import { nothing, type PropertyValues } from "lit";
declare global {
    interface HTMLElementTagNameMap {
        "dc-connection-dialog": ConnectionDialog;
    }
}
export declare class ConnectionDialog extends DotConnectElement {
    #private;
    open: boolean;
    show(): void;
    close(): void;
    static get styles(): import("lit").CSSResultGroup[];
    render(): import("lit").TemplateResult<1>;
}
declare abstract class BaseWalletConnection<TWallet extends Wallet = Wallet> extends DotConnectElement {
    #private;
    wallet: TWallet;
    protected get walletInfo(): WalletConfig<import("../wallets/types.js").BaseWalletInfo> | undefined;
    protected accounts: import("../observable-signal.js").ObservableSignal<PolkadotSignerAccount[], never[]>;
    protected readonly connected: import("@preact/signals-core").ReadonlySignal<boolean>;
    protected readonly pending: import("@preact/signals-core").Signal<boolean>;
    protected updated(changedProperties: PropertyValues): void;
    static readonly styles: import("lit").CSSResultGroup[];
    protected render(): import("lit").TemplateResult<1>;
    protected trailing(): import("lit").TemplateResult<1>;
}
export declare class WalletConnection extends BaseWalletConnection {
    protected trailing(): import("lit").TemplateResult<1>;
}
export declare class DeepLinkWalletConnection extends BaseWalletConnection<DeepLinkWallet> {
    #private;
    constructor();
    protected trailing(): import("lit").TemplateResult<1>;
    static styles: (import("lit").CSSResult | import("lit").CSSResultGroup[])[];
    protected render(): import("lit").TemplateResult<1>;
}
export declare class HardwareWalletConnection extends BaseWalletConnection<LedgerWallet> {
    protected open: false | "manage" | "connect";
    protected trailing(): import("lit").TemplateResult<1>;
    protected render(): import("lit").TemplateResult<1>;
}
export declare class DownloadableWallet extends DotConnectElement {
    #private;
    wallet: InjectedWalletInfo;
    static shouldRender(wallet: InjectedWalletInfo): boolean;
    static styles: import("lit").CSSResultGroup[];
    protected render(): import("lit").TemplateResult<1> | typeof nothing;
}
export {};
//# sourceMappingURL=connection-dialog.d.ts.map