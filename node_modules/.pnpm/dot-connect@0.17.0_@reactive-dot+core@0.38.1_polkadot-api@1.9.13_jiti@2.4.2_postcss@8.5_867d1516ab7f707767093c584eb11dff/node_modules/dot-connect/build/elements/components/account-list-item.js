var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { DotConnectElement } from "./element.js";
import "./list-item.js";
import "dot-identicon";
import { html, nothing } from "lit";
import { customElement, property } from "lit/decorators.js";
import { ifDefined } from "lit/directives/if-defined.js";
let AccountListItem = class AccountListItem extends DotConnectElement {
    constructor() {
        super(...arguments);
        this.clickable = false;
        this.pending = false;
        this.checked = false;
    }
    get shortenedAddress() {
        return this.address.slice(0, 6) + "..." + this.address.slice(-6);
    }
    render() {
        return html `<dc-list-item
      ?clickable=${this.clickable}
      ?pending=${this.pending}
      type=${ifDefined(this.type)}
      ?checked=${this.checked}
    >
      <div class="icon" slot="leading">
        <polkadot-identicon
          address=${this.address}
          size="100%"
          backgroundColor="var(--surface-container-color)"
        ></polkadot-identicon>
      </div>
      <span slot="headline">${this.name ?? this.shortenedAddress}</span>
      ${this.name === undefined
            ? nothing
            : html `<span slot="supporting">${this.shortenedAddress}</span>`}
      <slot name="trailing" slot="trailing"></slot>
    </dc-list-item>`;
    }
};
__decorate([
    property()
], AccountListItem.prototype, "address", void 0);
__decorate([
    property()
], AccountListItem.prototype, "name", void 0);
__decorate([
    property({ type: Boolean })
], AccountListItem.prototype, "clickable", void 0);
__decorate([
    property({ type: Boolean })
], AccountListItem.prototype, "pending", void 0);
__decorate([
    property()
], AccountListItem.prototype, "type", void 0);
__decorate([
    property({ type: Boolean })
], AccountListItem.prototype, "checked", void 0);
AccountListItem = __decorate([
    customElement("dc-account-list-item")
], AccountListItem);
export { AccountListItem };
//# sourceMappingURL=account-list-item.js.map