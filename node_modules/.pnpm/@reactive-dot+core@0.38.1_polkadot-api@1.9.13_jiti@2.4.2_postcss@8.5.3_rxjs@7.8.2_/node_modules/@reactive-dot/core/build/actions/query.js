import { map } from "rxjs/operators";
export function preflight(instruction) {
    if ("at" in instruction && instruction.at?.startsWith("0x")) {
        return "promise";
    }
    switch (instruction.instruction) {
        case "get-constant":
        case "call-api":
            return "promise";
        case "read-storage-entries":
        case "read-storage":
            return "observable";
    }
}
export function query(api, instruction, options) {
    switch (instruction.instruction) {
        case "get-constant":
            return (
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            api.constants[instruction.pallet][instruction.constant]());
        case "call-api":
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return api.apis[instruction.pallet][instruction.api](...instruction.args, { signal: options?.signal, at: instruction.at });
        case "read-storage": {
            const storageEntry = api.query[instruction.pallet][instruction.storage
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            ];
            return instruction.at?.startsWith("0x")
                ? storageEntry.getValue(...instruction.args, { at: instruction.at })
                : storageEntry.watchValue(...instruction.args, ...[instruction.at].filter((x) => x !== undefined));
        }
        case "read-storage-entries":
            return instruction.at?.startsWith("0x")
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    api.query[instruction.pallet][instruction.storage] // Comment to prevent formatting
                        .getEntries(...instruction.args, {
                        signal: options?.signal,
                        at: instruction.at,
                    })
                        .then((response) => response.map(({ keyArgs, value }) => Object.assign([keyArgs, value], {
                        /** @deprecated Use index access instead. */
                        keyArgs,
                        /** @deprecated Use index access instead. */
                        value,
                    })))
                : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    api.query[instruction.pallet][instruction.storage] // Comment to prevent formatting
                        .watchEntries(...instruction.args, {
                        at: instruction.at,
                    })
                        .pipe(map((response) => response.entries.map(({ args, value }) => Object.assign([args, value], {
                        /** @deprecated Use index access instead. */
                        keyArgs: args,
                        /** @deprecated Use index access instead. */
                        value,
                    }))));
    }
}
//# sourceMappingURL=query.js.map