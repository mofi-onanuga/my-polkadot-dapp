/* v8 ignore start */
import { getDynamicBuilder, getLookupFn, } from "@polkadot-api/metadata-builders";
import { Bytes, enhanceCodec, metadata as metadataCodec, Struct, u8, } from "@polkadot-api/substrate-bindings";
export async function unstable_getBlockExtrinsics(client, typedApi, blockHash) {
    const v15MetadataBinary = await typedApi.apis["Metadata"]["metadata_at_version"](15);
    if (v15MetadataBinary === undefined) {
        return;
    }
    const metadataResult = metadataCodec.dec(v15MetadataBinary.asBytes());
    if (metadataResult.metadata.tag !== "v15") {
        return;
    }
    const metadata = metadataResult.metadata.value;
    const dynamicBuilder = await getOrCreateDynamicBuilder(client, metadata);
    const version$ = enhanceCodec(u8, (value) => (+!!value.signed << 7) | value.version, (value) => ({
        version: value & ~(1 << 7),
        signed: !!(value & (1 << 7)),
    }));
    const address$ = dynamicBuilder.buildDefinition(metadata.extrinsic.address);
    const signature$ = dynamicBuilder.buildDefinition(metadata.extrinsic.signature);
    const rawExtra$ = dynamicBuilder.buildDefinition(metadata.extrinsic.extra);
    const extra$ = enhanceCodec(rawExtra$, (extra) => metadata.extrinsic.signedExtensions.map((signedExtension) => extra["Check" +
        signedExtension.identifier.slice(0, 1).toUpperCase() +
        signedExtension.identifier.slice(1, 0)]), (extra) => Object.fromEntries(metadata.extrinsic.signedExtensions.map((signedExtension, index) => {
        const name = signedExtension.identifier.replace(/^Check/, "");
        return [
            name.slice(0, 1).toLowerCase() + name.slice(1),
            extra[index],
        ];
    })));
    const rawCall$ = dynamicBuilder.buildDefinition(metadata.extrinsic.call);
    const call$ = enhanceCodec(rawCall$, (call) => ({
        type: call.module,
        value: { type: call.func, value: call.args },
    }), (call) => ({
        module: call.type,
        func: call.value.type,
        args: call.value.value,
    }));
    const inherentExtrinsic$ = Struct({
        version: version$,
        body: Struct({ call: call$ }),
    });
    const signedExtrinsic$ = Struct({
        version: version$,
        body: Struct({
            sender: address$,
            signature: signature$,
            extra: extra$,
            call: call$,
        }),
    });
    const simpleVersion$ = Struct({
        version: version$,
    });
    const extrinsic$ = enhanceCodec(Bytes(), (extrinsic) => extrinsic.signed
        ? signedExtrinsic$.enc({
            version: { version: extrinsic.version, signed: extrinsic.signed },
            body: {
                sender: extrinsic.sender,
                signature: extrinsic.signature,
                extra: extrinsic.extra,
                call: extrinsic.call,
            },
        })
        : inherentExtrinsic$.enc({
            version: { version: extrinsic.version, signed: extrinsic.signed },
            body: { call: extrinsic.call },
        }), (extrinsicBytes) => {
        const { version: { signed }, } = simpleVersion$.dec(extrinsicBytes);
        const rawExtrinsic = (signed ? signedExtrinsic$.dec : inherentExtrinsic$.dec)(extrinsicBytes);
        return { ...rawExtrinsic.version, ...rawExtrinsic.body };
    });
    const blockBody = await client.getBlockBody(blockHash);
    return blockBody.map(extrinsic$.dec);
}
const dynamicBuilders = new WeakMap();
async function getOrCreateDynamicBuilder(client, metadata) {
    if (dynamicBuilders.has(client)) {
        return dynamicBuilders.get(client);
    }
    const lookup = getLookupFn(metadata);
    const dynamicBuilder = getDynamicBuilder(lookup);
    return dynamicBuilders.set(client, dynamicBuilder).get(client);
}
//# sourceMappingURL=get-block-extrinsics.js.map