import { ReactiveDotError } from "../../errors.js";
import { Wallet } from "../wallet.js";
import { connectInjectedExtension, } from "polkadot-api/pjs-signer";
import { BehaviorSubject, Observable, of } from "rxjs";
import { map, switchMap } from "rxjs/operators";
export class InjectedWallet extends Wallet {
    name;
    #extension$ = new BehaviorSubject(undefined);
    get id() {
        return `injected/${this.name}`;
    }
    constructor(name, options) {
        super(options);
        this.name = name;
    }
    async initialize() {
        if (this.storage.getItem("connected") !== null) {
            await this.connect();
        }
    }
    connected$ = this.#extension$.pipe(map((extension) => extension !== undefined));
    async connect() {
        if (this.#extension$.getValue() === undefined) {
            this.#extension$.next(await connectInjectedExtension(this.name, this.options?.originName));
            this.storage.setItem("connected", JSON.stringify(true));
        }
    }
    disconnect() {
        this.#extension$.getValue()?.disconnect();
        this.#extension$.next(undefined);
        this.storage.removeItem("connected");
    }
    accounts$ = this.#extension$.pipe(switchMap((extension) => {
        if (extension === undefined) {
            return of([]);
        }
        return new Observable((subscriber) => {
            subscriber.next(this.#withIds(extension.getAccounts()));
            subscriber.add(extension.subscribe((accounts) => subscriber.next(this.#withIds(accounts))));
        });
    }));
    getAccounts() {
        const extension = this.#extension$.getValue();
        if (extension === undefined) {
            throw new ReactiveDotError("Extension is not connected");
        }
        return this.#withIds(extension.getAccounts());
    }
    #withIds(accounts) {
        return accounts.map((account, index) => ({
            id: index.toString(),
            ...account,
        }));
    }
}
//# sourceMappingURL=wallet.js.map