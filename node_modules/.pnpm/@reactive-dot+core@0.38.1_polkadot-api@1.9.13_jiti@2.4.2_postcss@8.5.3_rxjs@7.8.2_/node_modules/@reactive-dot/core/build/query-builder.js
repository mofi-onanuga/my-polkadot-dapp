export class Query {
    #instructions;
    constructor(instructions = []) {
        this.#instructions = instructions;
    }
    get instructions() {
        return Object.freeze(this.#instructions.slice());
    }
    constant(pallet, constant) {
        return this.#append({
            instruction: "get-constant",
            pallet,
            constant,
        });
    }
    /**
     * @deprecated Use {@link Query.constant} instead.
     */
    getConstant = this.constant;
    storage(pallet, storage, ...argsAndOptions) {
        const [args, options] = argsAndOptions;
        return this.#append({
            instruction: "read-storage",
            pallet,
            storage,
            args: args ?? [],
            at: options?.at,
        });
    }
    /**
     * @deprecated Use {@link Query.storage} instead.
     */
    readStorage = this.storage;
    storages(pallet, storage, args, options) {
        return this.#append({
            instruction: "read-storage",
            pallet,
            storage,
            args,
            at: options?.at,
            multi: true,
        });
    }
    /**
     * @deprecated Use {@link Query.storages} instead.
     */
    readStorages = this.storages;
    storageEntries(pallet, storage, args, options) {
        return this.#append({
            instruction: "read-storage-entries",
            pallet,
            storage,
            args: args ?? [],
            at: options?.at,
        });
    }
    /**
     * @deprecated Use {@link Query.storageEntries} instead.
     */
    readStorageEntries = this.storageEntries;
    runtimeApi(pallet, api, ...argsAndOptions) {
        const [args, options] = argsAndOptions;
        return this.#append({
            instruction: "call-api",
            pallet,
            api,
            args: args ?? [],
            at: options?.at,
        });
    }
    /**
     * @deprecated Use {@link Query.runtimeApi} instead.
     */
    callApi = this.runtimeApi;
    runtimeApis(pallet, api, args, options) {
        return this.#append({
            instruction: "call-api",
            pallet,
            api,
            args,
            at: options?.at,
            multi: true,
        });
    }
    /**
     * @deprecated Use {@link Query.runtimeApis} instead.
     */
    callApis = this.runtimeApis;
    concat(...queries) {
        return new Query(this.#instructions.concat(...queries.map((query) => query.#instructions)));
    }
    #append(instruction) {
        return new Query([...this.#instructions, instruction]);
    }
}
//# sourceMappingURL=query-builder.js.map