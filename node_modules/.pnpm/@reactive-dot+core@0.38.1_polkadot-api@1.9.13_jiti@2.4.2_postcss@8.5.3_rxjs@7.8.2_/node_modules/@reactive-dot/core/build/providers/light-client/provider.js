/* eslint-disable no-unexpected-multiline */
import { lazy } from "../../utils/lazy.js";
import { wellknownChains, } from "./wellknown-chains.js";
import { createClient } from "polkadot-api";
import { getSmProvider } from "polkadot-api/sm-provider";
const getProviderSymbol = Symbol("getProvider");
export function createLightClientProvider({ useExtensionProvider = true, } = {}) {
    const getSmoldot = lazy(async () => {
        if (!useExtensionProvider) {
            return startSmoldotWorker();
        }
        return (await startSubstrateConnectWorker()) ?? startSmoldotWorker();
    });
    return {
        addRelayChain(options) {
            const getChainSpec = lazy(() => "chainSpec" in options
                ? Promise.resolve(options.chainSpec)
                : wellknownChains[options.id][0]().then((chain) => chain.chainSpec));
            const getRelayChain = lazy(async () => {
                const smoldot = await getSmoldot();
                const chainSpec = await getChainSpec();
                if (isSubstrateConnectProvider(smoldot)) {
                    return smoldot.addChain(chainSpec);
                }
                return smoldot.addChain({ chainSpec });
            });
            return addLightClientProvider({
                [getProviderSymbol]() {
                    return getSmProvider(getRelayChain());
                },
                addParachain(options) {
                    return addLightClientProvider({
                        [getProviderSymbol]() {
                            const chainSpecPromise = "chainSpec" in options
                                ? Promise.resolve(options.chainSpec)
                                : // @ts-expect-error TODO: fix this
                                    Object.fromEntries(Object.values(wellknownChains).flatMap((relayChain) => Object.entries(relayChain[1])))[options.id]()
                                        .then((chain) => chain.chainSpec);
                            const parachainPromise = Promise.all([
                                getRelayChain(),
                                chainSpecPromise,
                            ]).then(([relayChain, chainSpec]) => "addChain" in relayChain
                                ? relayChain.addChain(chainSpec)
                                : (async () => {
                                    const smoldot = await getSmoldot();
                                    return isSubstrateConnectProvider(smoldot)
                                        ? smoldot.addChain(chainSpec)
                                        : smoldot.addChain({
                                            chainSpec,
                                            potentialRelayChains: [relayChain],
                                        });
                                })());
                            return getSmProvider(parachainPromise);
                        },
                    });
                },
            });
        },
    };
}
export function isLightClientProvider(value) {
    return lightClientProviders.has(value);
}
export function createClientFromLightClientProvider(provider) {
    return createClient(provider[getProviderSymbol]());
}
const lightClientProviders = new WeakSet();
function addLightClientProvider(provider) {
    lightClientProviders.add(provider);
    return provider;
}
function startSmoldotWorker() {
    return import("polkadot-api/smoldot/from-worker").then(({ startFromWorker }) => startFromWorker(new Worker(new URL("polkadot-api/smoldot/worker", import.meta.url), {
        type: "module",
    })));
}
const substrateConnectSet = new WeakSet();
function startSubstrateConnectWorker() {
    return import("@substrate/smoldot-discovery").then(async ({ getSmoldotExtensionProviders }) => {
        const provider = await getSmoldotExtensionProviders().at(0)?.provider;
        if (provider !== undefined) {
            substrateConnectSet.add(provider);
        }
        return provider;
    });
}
function isSubstrateConnectProvider(value) {
    return substrateConnectSet.has(value);
}
//# sourceMappingURL=provider.js.map