import { wellknownChains, type WellknownParachainId, type WellknownRelayChainId } from "./wellknown-chains.js";
import type { JsonRpcProvider } from "polkadot-api/ws-provider/web";
declare const getProviderSymbol: unique symbol;
export type LightClientProvider = {
    [getProviderSymbol]: () => JsonRpcProvider;
};
type AddChainOptions<TWellknownChainId> = {
    chainSpec: string;
} | {
    id: TWellknownChainId;
};
type LightClientOptions = {
    /**
     * Connect to the first available {@link https://github.com/paritytech/substrate-connect | Substrate Connect} provider.
     */
    useExtensionProvider?: boolean;
};
export declare function createLightClientProvider({ useExtensionProvider, }?: LightClientOptions): {
    addRelayChain<TRelayChainId extends WellknownRelayChainId>(options: AddChainOptions<TRelayChainId>): {
        [getProviderSymbol](): JsonRpcProvider;
        addParachain<TParachainId extends keyof (typeof wellknownChains)[TRelayChainId][1] extends never ? WellknownParachainId : keyof (typeof wellknownChains)[TRelayChainId][1]>(options: AddChainOptions<TParachainId>): {
            [getProviderSymbol](): JsonRpcProvider;
        };
    };
};
export declare function isLightClientProvider(value: unknown): value is LightClientProvider;
export declare function createClientFromLightClientProvider(provider: LightClientProvider): import("polkadot-api").PolkadotClient;
export {};
//# sourceMappingURL=provider.d.ts.map