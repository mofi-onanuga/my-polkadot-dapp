import type { WalletOptions } from "../../core/build/wallets/wallet.js";
import { LocalWallet, type PolkadotSignerAccount } from "@reactive-dot/core/wallets.js";
type LedgerAccount = {
    id: string;
    publicKey: Uint8Array;
    name?: string;
    path: number;
};
export declare class LedgerWallet extends LocalWallet<LedgerAccount, WalletOptions, "accounts"> {
    #private;
    readonly id = "ledger";
    readonly name = "Ledger";
    readonly accounts$: import("rxjs").Observable<PolkadotSignerAccount[]>;
    readonly connected$: import("rxjs").Observable<boolean>;
    constructor(options?: WalletOptions);
    initialize(): void;
    connect(): Promise<void>;
    disconnect(): void;
    accountStore: {
        add: (account: LedgerAccount) => void;
        clear: () => void;
        delete: (identifiable: string | {
            id: string;
        }) => void;
        has: (identifiable: string | {
            id: string;
        }) => boolean;
        values: () => LedgerAccount[];
    };
    /**
     * @experimental
     * @param path - The primary derivation index
     * @returns The connected Ledger's account
     */
    getConnectedAccount(path?: number): Promise<LedgerAccount>;
}
export {};
//# sourceMappingURL=ledger-wallet.d.ts.map