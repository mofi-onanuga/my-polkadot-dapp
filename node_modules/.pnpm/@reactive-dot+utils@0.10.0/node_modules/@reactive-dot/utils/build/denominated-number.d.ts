export declare class DenominatedNumber extends Number {
    #private;
    readonly decimals: number;
    readonly denomination?: string | undefined;
    readonly planck: bigint;
    constructor(planck: bigint | boolean | number | string, decimals: number, denomination?: string | undefined);
    static fromNumber(number: number | string, decimals: number, denomination?: string): DenominatedNumber;
    valueOf(): number;
    toString(): string;
    toLocaleString(locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
    toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
    mapPlanck(mapper: (planck: bigint) => bigint): DenominatedNumber;
    /**
     * @deprecated Use {@link DenominatedNumber.mapPlanck} instead.
     */
    mapFromPlanck: (mapper: (planck: bigint) => bigint) => DenominatedNumber;
    mapNumber(mapper: (number: number) => number): DenominatedNumber;
    /**
     * @deprecated Use {@link DenominatedNumber.mapNumber} instead.
     */
    mapFromNumber: (mapper: (number: number) => number) => DenominatedNumber;
}
//# sourceMappingURL=denominated-number.d.ts.map