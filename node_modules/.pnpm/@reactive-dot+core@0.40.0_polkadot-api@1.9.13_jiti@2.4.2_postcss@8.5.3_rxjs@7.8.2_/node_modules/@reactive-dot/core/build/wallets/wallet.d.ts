import { type Storage } from "../storage.js";
import type { MaybePromise } from "../types.js";
import type { PolkadotSignerAccount } from "./account.js";
import { type Observable } from "rxjs";
export type WalletOptions = {
    storage?: Storage | undefined;
};
export declare abstract class Wallet<TOptions extends WalletOptions = WalletOptions, TStorageKey extends string = string> {
    #private;
    protected readonly options?: TOptions | undefined;
    abstract readonly id: string;
    abstract readonly name: string;
    protected get storage(): Storage<TStorageKey extends void ? string : TStorageKey>;
    constructor(options?: TOptions | undefined);
    abstract initialize(): MaybePromise<void>;
    abstract readonly connected$: Observable<boolean>;
    abstract connect(): MaybePromise<void>;
    abstract disconnect(): MaybePromise<void>;
    abstract readonly accounts$: Observable<PolkadotSignerAccount[]>;
    getAccounts(): MaybePromise<PolkadotSignerAccount[]>;
}
//# sourceMappingURL=wallet.d.ts.map