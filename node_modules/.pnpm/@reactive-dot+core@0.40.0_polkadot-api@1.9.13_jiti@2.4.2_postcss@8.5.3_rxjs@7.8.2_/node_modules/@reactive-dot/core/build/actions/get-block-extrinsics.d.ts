import type { Binary, ChainDefinition, Enum, FixedSizeBinary, PolkadotClient, SS58String, TypedApi } from "polkadot-api";
type MultiAddress = Enum<{
    Id: SS58String;
    Index: number | bigint;
    Raw: Binary;
    Address32: FixedSizeBinary<32>;
    Address20: FixedSizeBinary<20>;
}>;
type MultiSignature = Enum<{
    Ed25519: FixedSizeBinary<64>;
    Sr25519: FixedSizeBinary<64>;
    Ecdsa: FixedSizeBinary<65>;
}>;
type Extra = Partial<{
    nonZeroSender: undefined;
    specVersion: undefined;
    txVersion: undefined;
    genesis: undefined;
    mortality: {
        type: `Mortal${string}`;
        value: number;
    };
    nonce: number;
    weight: undefined;
    transactionPayment: bigint;
    metadataHash: Enum<{
        Disabled: undefined;
        Enabled: undefined;
    }>;
    [key: string]: unknown;
}>;
type Call = {
    module: string;
    func: string;
    args: unknown;
};
type Extrinsic = {
    version: number;
    call: Call;
} & ({
    signed: false;
} | {
    signed: true;
    sender: MultiAddress;
    signature: MultiSignature;
    extra: Extra;
});
export declare function unstable_getBlockExtrinsics(client: PolkadotClient, typedApi: TypedApi<ChainDefinition>, blockHash: string): Promise<Extrinsic[] | undefined>;
export {};
//# sourceMappingURL=get-block-extrinsics.d.ts.map