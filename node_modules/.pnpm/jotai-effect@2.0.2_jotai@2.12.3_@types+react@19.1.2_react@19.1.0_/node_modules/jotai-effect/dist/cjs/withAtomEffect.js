"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withAtomEffect = withAtomEffect;
const atomEffect_1 = require("./atomEffect.js");
const env_1 = require("./env.js");
function withAtomEffect(targetAtom, effect) {
    const effectAtom = (0, atomEffect_1.atomEffect)((get, set) => {
        const getter = ((a) => a === targetWithEffect ? get(targetAtom) : get(a));
        getter.peek = get.peek;
        return targetWithEffect.effect(getter, set);
    });
    if ((0, env_1.isDev)()) {
        Object.defineProperty(effectAtom, 'debugLabel', {
            get: () => { var _a; return `${(_a = targetWithEffect.debugLabel) !== null && _a !== void 0 ? _a : 'atomWithEffect'}:effect`; },
        });
        effectAtom.debugPrivate = true;
    }
    const descriptors = Object.getOwnPropertyDescriptors(targetAtom);
    descriptors.read.value = (get) => {
        try {
            return get(targetAtom);
        }
        finally {
            get(effectAtom);
        }
    };
    if ('write' in targetAtom && typeof targetAtom.write === 'function') {
        descriptors.write.value = targetAtom.write.bind(targetAtom);
        delete descriptors.onMount;
    }
    // avoid reading `init` to preserve lazy initialization
    const targetPrototype = Object.getPrototypeOf(targetAtom);
    const targetWithEffect = Object.create(targetPrototype, descriptors);
    targetWithEffect.effect = effect;
    return targetWithEffect;
}
//# sourceMappingURL=withAtomEffect.js.map