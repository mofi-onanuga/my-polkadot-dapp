{"version":3,"file":"codecs.mjs","sources":["../../src/codecs.ts"],"sourcesContent":["import {\n  Bytes,\n  Codec,\n  CodecType,\n  Option,\n  ScaleEnum,\n  Struct,\n  Tuple,\n  V15,\n  Vector,\n  _void,\n  bool,\n  compact,\n  compactNumber,\n  enhanceDecoder,\n  str,\n  u16,\n  u32,\n  u8,\n} from \"@polkadot-api/substrate-bindings\"\n\nconst extraInfoInner = {\n  specVersion: u32,\n  specName: str,\n  base58Prefix: u16,\n  decimals: u8,\n  tokenSymbol: str,\n}\nexport const extraInfo = Struct(extraInfoInner)\nexport type ExtraInfo = CodecType<typeof extraInfo>\n\nexport const hash = Bytes(32)\nexport const metadataDigest = ScaleEnum({\n  V0: _void,\n  V1: Struct({\n    typeInformationTreeRoot: hash,\n    extrinsicMetadataHash: hash,\n    ...extraInfoInner,\n  }),\n})\nexport type MetadataDigest = CodecType<typeof metadataDigest>\n\nexport const scalePrimitive = ScaleEnum({\n  bool: _void,\n  char: _void,\n  str: _void,\n  u8: _void,\n  u16: _void,\n  u32: _void,\n  u64: _void,\n  u128: _void,\n  u256: _void,\n  i8: _void,\n  i16: _void,\n  i32: _void,\n  i64: _void,\n  i128: _void,\n  i256: _void,\n})\nexport type ScalePrimitive = CodecType<typeof scalePrimitive>\n\nexport const typeRef = ScaleEnum({\n  bool: _void,\n  char: _void,\n  str: _void,\n  u8: _void,\n  u16: _void,\n  u32: _void,\n  u64: _void,\n  u128: _void,\n  u256: _void,\n  i8: _void,\n  i16: _void,\n  i32: _void,\n  i64: _void,\n  i128: _void,\n  i256: _void,\n  compactU8: _void,\n  compactU16: _void,\n  compactU32: _void,\n  compactU64: _void,\n  compactU128: _void,\n  compactU256: _void,\n  void: _void,\n  perId: compactNumber,\n})\nexport type TypeRef = CodecType<typeof typeRef>\n\nconst field = Struct({\n  name: Option(str),\n  ty: typeRef,\n  typeName: Option(str),\n})\nexport const typeDef = ScaleEnum({\n  composite: Vector(field),\n  enumeration: Struct({\n    name: str,\n    fields: Vector(field),\n    index: compactNumber,\n  }),\n  sequence: typeRef,\n  array: Struct({\n    len: u32,\n    typeParam: typeRef,\n  }),\n  tuple: Vector(typeRef),\n  bitSequence: Struct({\n    numBytes: u8,\n    leastSignificantBitFirst: bool,\n  }),\n})\nexport type TypeDef = CodecType<typeof typeDef>\n\nexport const lookupType = Struct({\n  path: Vector(str),\n  typeDef: typeDef,\n  typeId: compactNumber,\n})\nexport type LookupEntry = CodecType<typeof lookupType>\nexport type Lookup = Array<LookupEntry>\nexport const lookup: Codec<Lookup> = Vector(lookupType)\n\nexport const extrinsicMetadata = Struct({\n  version: u8,\n  addressTy: typeRef,\n  callTy: typeRef,\n  signatureTy: typeRef,\n  signedExtensions: Vector(\n    Struct({\n      identifier: str,\n      includedInExtrinsic: typeRef,\n      includedInSignedData: typeRef,\n    }),\n  ),\n})\nexport type ExtrinsicMetadata = CodecType<typeof extrinsicMetadata>\nexport type LookupValue = V15[\"lookup\"] extends Array<infer T> ? T : never\n\nconst versionDecoder = enhanceDecoder(u8[1], (value) => ({\n  version: value & ~(1 << 7),\n  signed: !!(value & (1 << 7)),\n}))\n\nexport const extrinsicDec = Tuple.dec(\n  compact[1],\n  versionDecoder,\n  Bytes(Infinity)[1],\n)\n\nexport const proof = Struct({\n  leaves: lookup,\n  leafIdxs: Vector(u32),\n  proofs: Vector(hash),\n  extrinsic: extrinsicMetadata,\n  info: extraInfo,\n})\nexport type Proof = CodecType<typeof proof>\n"],"names":[],"mappings":"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"}