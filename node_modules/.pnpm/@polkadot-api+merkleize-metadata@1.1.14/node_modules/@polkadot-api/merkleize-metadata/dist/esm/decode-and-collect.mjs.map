{"version":3,"file":"decode-and-collect.mjs","sources":["../../src/decode-and-collect.ts"],"sourcesContent":["import {\n  HexString,\n  _void,\n  compact,\n  createDecoder,\n  i128,\n  i16,\n  i256,\n  i32,\n  i64,\n  i8,\n  str,\n  u128,\n  u16,\n  u256,\n  u32,\n  u64,\n  u8,\n} from \"@polkadot-api/substrate-bindings\"\nimport { Lookup, TypeDef, TypeRef } from \"./codecs\"\n\nconst typeRefDecoders = {\n  bool: u8,\n  char: u8,\n  str,\n  u8,\n  u16,\n  u32,\n  u64,\n  u128,\n  u256,\n  i8,\n  i16,\n  i32,\n  i64,\n  i128,\n  i256,\n  void: _void,\n  compactU8: compact,\n  compactU16: compact,\n  compactU32: compact,\n  compactU64: compact,\n  compactU128: compact,\n  compactU256: compact,\n}\n\nconst innerDecodeAndCollect = (\n  input: Uint8Array,\n  typeRef: TypeRef,\n  idToLookups: Map<number, Array<number>>,\n  lookup: Lookup,\n  collected: Set<number>,\n) => {\n  if (typeRef.tag !== \"perId\") {\n    typeRefDecoders[typeRef.tag][1](input)\n    return\n  }\n\n  const handleTypeRef = (typeRef: TypeRef) => {\n    innerDecodeAndCollect(input, typeRef, idToLookups, lookup, collected)\n  }\n\n  const lookupIdxs = idToLookups.get(typeRef.value)!\n  const [currentIdx] = lookupIdxs\n  const current = lookup[currentIdx]\n\n  if (lookupIdxs.length === 1) collected.add(currentIdx)\n\n  switch (current.typeDef.tag) {\n    case \"enumeration\": {\n      const selectedIdx = u8.dec(input)\n      const [selected, collectedIdx] = lookupIdxs\n        .map(\n          (lookupIdx) =>\n            [lookup[lookupIdx].typeDef, lookupIdx] as [\n              TypeDef & { tag: \"enumeration\" },\n              number,\n            ],\n        )\n        .find(([x]) => x.value.index === selectedIdx)!\n      collected.add(collectedIdx)\n      selected.value.fields.forEach(({ ty }) => {\n        handleTypeRef(ty)\n      })\n      break\n    }\n    case \"sequence\": {\n      const len = compact.dec(input)\n      for (let i = 0; i < len; i++) handleTypeRef(current.typeDef.value)\n      break\n    }\n    case \"array\": {\n      for (let i = 0; i < current.typeDef.value.len; i++)\n        handleTypeRef(current.typeDef.value.typeParam)\n      break\n    }\n    case \"composite\": {\n      current.typeDef.value.forEach((x) => {\n        handleTypeRef(x.ty)\n      })\n      break\n    }\n    case \"tuple\": {\n      current.typeDef.value.forEach(handleTypeRef)\n      break\n    }\n    case \"bitSequence\":\n      throw new Error(\"bitSequence is not supported\")\n  }\n}\n\nexport const decodeAndCollectKnownLeafs = (\n  data: Uint8Array | HexString,\n  typeRefs: Array<TypeRef>,\n  lookup: Lookup,\n): Array<number> => {\n  let input = new Uint8Array()\n  createDecoder((_input) => {\n    input = _input\n  })(data)\n\n  const idToLookups = new Map<number, number[]>()\n  lookup.forEach((lookup, idx) => {\n    const arr = idToLookups.get(lookup.typeId)\n    if (arr) arr.push(idx)\n    else idToLookups.set(lookup.typeId, [idx])\n  })\n\n  const result = new Set<number>()\n  typeRefs.forEach((typeRef) => {\n    innerDecodeAndCollect(input, typeRef, idToLookups, lookup, result)\n  })\n\n  return [...result].sort((a, b) => a - b)\n}\n"],"names":["typeRef","lookup"],"mappings":"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"}