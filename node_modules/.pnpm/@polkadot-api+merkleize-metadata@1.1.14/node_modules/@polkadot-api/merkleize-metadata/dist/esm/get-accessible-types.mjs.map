{"version":3,"file":"get-accessible-types.mjs","sources":["../../src/get-accessible-types.ts"],"sourcesContent":["import { V15 } from \"@polkadot-api/substrate-bindings\"\nimport { LookupValue } from \"./codecs\"\n\nexport const getAccessibleTypes = (\n  metadata: V15,\n  definitions: Map<number, LookupValue>,\n): Map<number, number> => {\n  const types = new Set<number>()\n\n  const collectTypesFromId = (id: number) => {\n    if (types.has(id)) return\n\n    const { tag, value } = definitions.get(id)!.def\n    switch (tag) {\n      case \"composite\":\n        if (!value.length) break\n        types.add(id)\n        value.forEach(({ type }) => {\n          collectTypesFromId(type)\n        })\n        break\n      case \"variant\":\n        if (!value.length) break\n        types.add(id)\n        value.forEach(({ fields }) => {\n          fields.forEach(({ type }) => {\n            collectTypesFromId(type)\n          })\n        })\n        break\n      case \"tuple\":\n        if (!value.length) break\n        types.add(id)\n        value.forEach(collectTypesFromId)\n        break\n      case \"sequence\":\n        types.add(id)\n        collectTypesFromId(value)\n        break\n      case \"array\":\n        types.add(id)\n        collectTypesFromId(value.type)\n        break\n      case \"bitSequence\": // bitSequence inner types are not stored\n        types.add(id)\n      // primitive and compact are not stored\n    }\n  }\n\n  collectTypesFromId(metadata.extrinsic.call)\n  collectTypesFromId(metadata.extrinsic.address)\n  collectTypesFromId(metadata.extrinsic.signature)\n  metadata.extrinsic.signedExtensions.forEach(({ type, additionalSigned }) => {\n    collectTypesFromId(type)\n    collectTypesFromId(additionalSigned)\n  })\n\n  const sortedTypes = [...types].sort((a, b) => a - b)\n  return new Map(sortedTypes.map((value, idx) => [value, idx]))\n}\n"],"names":[],"mappings":"AAGa,MAAA,kBAAA,GAAqB,CAChC,QAAA,EACA,WACwB,KAAA;AACxB,EAAM,MAAA,KAAA,uBAAY,GAAY,EAAA;AAE9B,EAAM,MAAA,kBAAA,GAAqB,CAAC,EAAe,KAAA;AACzC,IAAI,IAAA,KAAA,CAAM,GAAI,CAAA,EAAE,CAAG,EAAA;AAEnB,IAAA,MAAM,EAAE,GAAK,EAAA,KAAA,KAAU,WAAY,CAAA,GAAA,CAAI,EAAE,CAAG,CAAA,GAAA;AAC5C,IAAA,QAAQ,GAAK;AAAA,MACX,KAAK,WAAA;AACH,QAAI,IAAA,CAAC,MAAM,MAAQ,EAAA;AACnB,QAAA,KAAA,CAAM,IAAI,EAAE,CAAA;AACZ,QAAA,KAAA,CAAM,OAAQ,CAAA,CAAC,EAAE,IAAA,EAAW,KAAA;AAC1B,UAAA,kBAAA,CAAmB,IAAI,CAAA;AAAA,SACxB,CAAA;AACD,QAAA;AAAA,MACF,KAAK,SAAA;AACH,QAAI,IAAA,CAAC,MAAM,MAAQ,EAAA;AACnB,QAAA,KAAA,CAAM,IAAI,EAAE,CAAA;AACZ,QAAA,KAAA,CAAM,OAAQ,CAAA,CAAC,EAAE,MAAA,EAAa,KAAA;AAC5B,UAAA,MAAA,CAAO,OAAQ,CAAA,CAAC,EAAE,IAAA,EAAW,KAAA;AAC3B,YAAA,kBAAA,CAAmB,IAAI,CAAA;AAAA,WACxB,CAAA;AAAA,SACF,CAAA;AACD,QAAA;AAAA,MACF,KAAK,OAAA;AACH,QAAI,IAAA,CAAC,MAAM,MAAQ,EAAA;AACnB,QAAA,KAAA,CAAM,IAAI,EAAE,CAAA;AACZ,QAAA,KAAA,CAAM,QAAQ,kBAAkB,CAAA;AAChC,QAAA;AAAA,MACF,KAAK,UAAA;AACH,QAAA,KAAA,CAAM,IAAI,EAAE,CAAA;AACZ,QAAA,kBAAA,CAAmB,KAAK,CAAA;AACxB,QAAA;AAAA,MACF,KAAK,OAAA;AACH,QAAA,KAAA,CAAM,IAAI,EAAE,CAAA;AACZ,QAAA,kBAAA,CAAmB,MAAM,IAAI,CAAA;AAC7B,QAAA;AAAA,MACF,KAAK,aAAA;AACH,QAAA,KAAA,CAAM,IAAI,EAAE,CAAA;AAAA;AAEhB,GACF;AAEA,EAAmB,kBAAA,CAAA,QAAA,CAAS,UAAU,IAAI,CAAA;AAC1C,EAAmB,kBAAA,CAAA,QAAA,CAAS,UAAU,OAAO,CAAA;AAC7C,EAAmB,kBAAA,CAAA,QAAA,CAAS,UAAU,SAAS,CAAA;AAC/C,EAAA,QAAA,CAAS,UAAU,gBAAiB,CAAA,OAAA,CAAQ,CAAC,EAAE,IAAA,EAAM,kBAAuB,KAAA;AAC1E,IAAA,kBAAA,CAAmB,IAAI,CAAA;AACvB,IAAA,kBAAA,CAAmB,gBAAgB,CAAA;AAAA,GACpC,CAAA;AAED,EAAM,MAAA,WAAA,GAAc,CAAC,GAAG,KAAK,CAAA,CAAE,KAAK,CAAC,CAAA,EAAG,CAAM,KAAA,CAAA,GAAI,CAAC,CAAA;AACnD,EAAO,OAAA,IAAI,GAAI,CAAA,WAAA,CAAY,GAAI,CAAA,CAAC,KAAO,EAAA,GAAA,KAAQ,CAAC,KAAA,EAAO,GAAG,CAAC,CAAC,CAAA;AAC9D;;;;"}