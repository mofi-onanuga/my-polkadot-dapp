{"version":3,"file":"proof.mjs","sources":["../../src/proof.ts"],"sourcesContent":["const getLevelFromIdx = (idx: number) => Math.log2(idx + 1) | 0\nconst getAncestorIdx = (from: number, nLevels: number) =>\n  ((from + 1) >> nLevels) - 1\n\nexport function getProofData(\n  leaves: Array<Uint8Array>,\n  knownLeavesIdxs: Array<number>,\n) {\n  const knownLeaves = knownLeavesIdxs.map((idx) => leaves[idx])\n\n  const startingIdx = leaves.length - 1\n  const leafIdxs = knownLeavesIdxs.map((idx) => startingIdx + idx)\n\n  const proofIdxs: Array<number> = []\n  if (leafIdxs.length) {\n    const nLevels = getLevelFromIdx(leafIdxs.at(-1)!)\n    const splitPosition = Math.pow(2, nLevels) - 1\n    const splitIdx = leafIdxs.findIndex((x) => x >= splitPosition)\n    if (splitIdx > 0) {\n      leafIdxs.unshift(...leafIdxs.splice(splitIdx))\n      knownLeaves.unshift(...knownLeaves.splice(splitIdx))\n    }\n  }\n\n  let targetIdx = 0\n  const traverse = (nodeIdx: number): void => {\n    if (targetIdx === leafIdxs.length) {\n      proofIdxs.push(nodeIdx)\n      return\n    }\n\n    const target = leafIdxs[targetIdx]\n    if (target === nodeIdx) {\n      ++targetIdx\n      return\n    }\n\n    const currentLevel = getLevelFromIdx(nodeIdx)\n    const targetLevel = getLevelFromIdx(target)\n\n    if (nodeIdx !== getAncestorIdx(target, targetLevel - currentLevel)) {\n      proofIdxs.push(nodeIdx)\n      return\n    }\n\n    const leftSon = 2 * nodeIdx + 1\n    traverse(leftSon)\n    traverse(leftSon + 1)\n  }\n  traverse(0)\n\n  return {\n    leaves: knownLeaves,\n    leafIdxs,\n    proofIdxs,\n  }\n}\n"],"names":[],"mappings":"AAAA,MAAM,kBAAkB,CAAC,GAAA,KAAgB,KAAK,IAAK,CAAA,GAAA,GAAM,CAAC,CAAI,GAAA,CAAA;AAC9D,MAAM,iBAAiB,CAAC,IAAA,EAAc,OAClC,KAAA,CAAA,IAAA,GAAO,KAAM,OAAW,IAAA,CAAA;AAEZ,SAAA,YAAA,CACd,QACA,eACA,EAAA;AACA,EAAA,MAAM,cAAc,eAAgB,CAAA,GAAA,CAAI,CAAC,GAAQ,KAAA,MAAA,CAAO,GAAG,CAAC,CAAA;AAE5D,EAAM,MAAA,WAAA,GAAc,OAAO,MAAS,GAAA,CAAA;AACpC,EAAA,MAAM,WAAW,eAAgB,CAAA,GAAA,CAAI,CAAC,GAAA,KAAQ,cAAc,GAAG,CAAA;AAE/D,EAAA,MAAM,YAA2B,EAAC;AAClC,EAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,IAAA,MAAM,OAAU,GAAA,eAAA,CAAgB,QAAS,CAAA,EAAA,CAAG,EAAE,CAAE,CAAA;AAChD,IAAA,MAAM,aAAgB,GAAA,IAAA,CAAK,GAAI,CAAA,CAAA,EAAG,OAAO,CAAI,GAAA,CAAA;AAC7C,IAAA,MAAM,WAAW,QAAS,CAAA,SAAA,CAAU,CAAC,CAAA,KAAM,KAAK,aAAa,CAAA;AAC7D,IAAA,IAAI,WAAW,CAAG,EAAA;AAChB,MAAA,QAAA,CAAS,OAAQ,CAAA,GAAG,QAAS,CAAA,MAAA,CAAO,QAAQ,CAAC,CAAA;AAC7C,MAAA,WAAA,CAAY,OAAQ,CAAA,GAAG,WAAY,CAAA,MAAA,CAAO,QAAQ,CAAC,CAAA;AAAA;AACrD;AAGF,EAAA,IAAI,SAAY,GAAA,CAAA;AAChB,EAAM,MAAA,QAAA,GAAW,CAAC,OAA0B,KAAA;AAC1C,IAAI,IAAA,SAAA,KAAc,SAAS,MAAQ,EAAA;AACjC,MAAA,SAAA,CAAU,KAAK,OAAO,CAAA;AACtB,MAAA;AAAA;AAGF,IAAM,MAAA,MAAA,GAAS,SAAS,SAAS,CAAA;AACjC,IAAA,IAAI,WAAW,OAAS,EAAA;AACtB,MAAE,EAAA,SAAA;AACF,MAAA;AAAA;AAGF,IAAM,MAAA,YAAA,GAAe,gBAAgB,OAAO,CAAA;AAC5C,IAAM,MAAA,WAAA,GAAc,gBAAgB,MAAM,CAAA;AAE1C,IAAA,IAAI,OAAY,KAAA,cAAA,CAAe,MAAQ,EAAA,WAAA,GAAc,YAAY,CAAG,EAAA;AAClE,MAAA,SAAA,CAAU,KAAK,OAAO,CAAA;AACtB,MAAA;AAAA;AAGF,IAAM,MAAA,OAAA,GAAU,IAAI,OAAU,GAAA,CAAA;AAC9B,IAAA,QAAA,CAAS,OAAO,CAAA;AAChB,IAAA,QAAA,CAAS,UAAU,CAAC,CAAA;AAAA,GACtB;AACA,EAAA,QAAA,CAAS,CAAC,CAAA;AAEV,EAAO,OAAA;AAAA,IACL,MAAQ,EAAA,WAAA;AAAA,IACR,QAAA;AAAA,IACA;AAAA,GACF;AACF;;;;"}