import { fromHex } from '@polkadot-api/utils';

const mergeUint8 = (inputs) => {
  const len = inputs.length;
  let totalLen = 0;
  for (let i = 0; i < len; i++) totalLen += inputs[i].byteLength;
  const result = new Uint8Array(totalLen);
  for (let idx = 0, at = 0; idx < len; idx++) {
    const current = inputs[idx];
    result.set(current, at);
    at += current.byteLength;
  }
  return result;
};
const toBytes = (input) => typeof input === "string" ? fromHex(input) : input;
const compactTypeRefs = {
  null: "void",
  u8: "compactU8",
  u16: "compactU16",
  u32: "compactU32",
  u64: "compactU64",
  u128: "compactU128",
  u256: "compactU256"
};

export { compactTypeRefs, mergeUint8, toBytes };
//# sourceMappingURL=utils.mjs.map
