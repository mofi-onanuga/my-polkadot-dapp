import { atomFamilyWithErrorCatcher } from "../utils/jotai/atom-family-with-error-catcher.js";
import { useAtomValue } from "./use-atom-value.js";
import { internal_useChainId } from "./use-chain-id.js";
import { clientAtom } from "./use-client.js";
import { useConfig } from "./use-config.js";
import { ReactiveDotError, } from "@reactive-dot/core";
import { atom } from "jotai";
import { soon } from "jotai-derive";
/**
 * Hook for getting Polkadot-API typed API.
 *
 * @param options - Additional options
 * @returns Polkadot-API typed API
 */
export function useTypedApi(options) {
    return useAtomValue(typedApiAtom(useConfig(), internal_useChainId(options)));
}
/**
 * @internal
 */
export const typedApiAtom = atomFamilyWithErrorCatcher((withErrorCatcher, config, chainId) => withErrorCatcher(atom((get) => {
    const chainConfig = config.chains[chainId];
    if (chainConfig === undefined) {
        throw new ReactiveDotError(`No config provided for chain ${chainId}`);
    }
    return soon(get(clientAtom(config, chainId)), (client) => client.getTypedApi(chainConfig.descriptor));
})));
//# sourceMappingURL=use-typed-api.js.map