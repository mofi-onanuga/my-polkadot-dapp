import type { ChainHookOptions } from "./types.js";
import { DenominatedNumber } from "@reactive-dot/utils";
/**
 * Hook for returning the native token amount from a planck value.
 *
 * @param planck - The planck value
 * @param options - Additional options
 * @returns The native token amount
 */
export declare function useNativeTokenAmountFromPlanck(planck: bigint | number | string, options?: ChainHookOptions): DenominatedNumber;
/**
 * Hook for returning a function that converts planck value to native token amount.
 *
 * @param options - Additional options
 * @returns Function for getting the native token amount from a planck value
 */
export declare function useNativeTokenAmountFromPlanck(options?: ChainHookOptions): (planck: bigint | number | string) => DenominatedNumber;
/**
 * Hook for returning the native token amount from a number value
 *
 * @param number - The number value
 * @param options - Additional options
 * @returns The native token amount
 */
export declare function useNativeTokenAmountFromNumber(number: number | string, options?: ChainHookOptions): DenominatedNumber;
/**
 * Hook for returning a function that converts number value to native token amount
 *
 * @param options - Additional options
 * @returns Function for getting the native token amount from a number value
 */
export declare function useNativeTokenAmountFromNumber(options?: ChainHookOptions): (number: number | string) => DenominatedNumber;
//# sourceMappingURL=use-native-token-amount.d.ts.map