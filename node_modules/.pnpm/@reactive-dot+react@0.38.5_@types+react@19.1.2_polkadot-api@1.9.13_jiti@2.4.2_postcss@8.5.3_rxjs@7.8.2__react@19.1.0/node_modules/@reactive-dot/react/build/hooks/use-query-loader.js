import { internal_useChainId } from "./use-chain-id.js";
import { useConfig } from "./use-config.js";
import { queryPayloadAtom } from "./use-query.js";
import { Query } from "@reactive-dot/core";
import { useAtomCallback } from "jotai/utils";
import { useCallback } from "react";
/**
 * Hook for loading queries without suspending.
 *
 * @returns The function to load queries
 */
export function useQueryLoader() {
    const config = useConfig();
    const chainId = internal_useChainId();
    const _loadQuery = useCallback((get) => (builder, options) => {
        const query = builder(new Query());
        void get(queryPayloadAtom(config, [
            {
                query,
                chainId: options?.chainId ?? chainId,
            },
        ]).observableAtom);
    }, [chainId, config]);
    const loadQuery = useAtomCallback(useCallback((get, _, builder) => _loadQuery(get)(builder), [_loadQuery]));
    return loadQuery;
}
//# sourceMappingURL=use-query-loader.js.map