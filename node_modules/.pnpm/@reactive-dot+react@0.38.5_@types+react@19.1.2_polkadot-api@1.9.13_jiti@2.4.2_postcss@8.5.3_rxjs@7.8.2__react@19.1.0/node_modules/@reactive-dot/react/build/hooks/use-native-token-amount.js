import { useChainSpecData } from "./use-chain-spec-data.js";
import { nativeTokenInfoFromChainSpecData } from "@reactive-dot/core/internal.js";
import { DenominatedNumber } from "@reactive-dot/utils";
import { useMemo } from "react";
export function useNativeTokenAmountFromPlanck(planckOrOptions, maybeOptions) {
    const options = typeof planckOrOptions === "object" ? planckOrOptions : maybeOptions;
    const chainSpecData = useChainSpecData(options);
    const nativeTokenInfo = useMemo(() => nativeTokenInfoFromChainSpecData(chainSpecData), [chainSpecData]);
    return useMemo(() => {
        switch (typeof planckOrOptions) {
            case "bigint":
            case "number":
            case "string":
                return new DenominatedNumber(planckOrOptions, nativeTokenInfo.decimals ?? 0, nativeTokenInfo.code);
            default:
                return (planck) => new DenominatedNumber(planck, nativeTokenInfo.decimals ?? 0, nativeTokenInfo.code);
        }
    }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [nativeTokenInfo.code, nativeTokenInfo.decimals, typeof planckOrOptions]);
}
export function useNativeTokenAmountFromNumber(numberOrOptions, maybeOptions) {
    const options = typeof numberOrOptions === "object" ? numberOrOptions : maybeOptions;
    const chainSpecData = useChainSpecData(options);
    const nativeTokenInfo = useMemo(() => nativeTokenInfoFromChainSpecData(chainSpecData), [chainSpecData]);
    return useMemo(() => {
        switch (typeof numberOrOptions) {
            case "number":
            case "string":
                return DenominatedNumber.fromNumber(numberOrOptions, nativeTokenInfo.decimals ?? 0, nativeTokenInfo.code);
            default:
                return (number) => DenominatedNumber.fromNumber(number, nativeTokenInfo.decimals ?? 0, nativeTokenInfo.code);
        }
    }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [nativeTokenInfo.code, nativeTokenInfo.decimals, typeof numberOrOptions]);
}
//# sourceMappingURL=use-native-token-amount.js.map