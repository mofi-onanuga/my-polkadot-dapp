import { useConfig } from "./use-config.js";
import { useQueryOptions } from "./use-query-options.js";
import { getQueryInstructionPayloadAtoms } from "./use-query.js";
import { useAtomCallback } from "jotai/utils";
import { useCallback } from "react";
/**
 * Hook for refreshing cached query.
 *
 * @param query - The function to create the query
 * @param options - Additional options
 * @returns The function to refresh the query
 */
export function useQueryRefresher(queryOrOptions, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
mayBeOptions) {
    const options = useQueryOptions(
    // @ts-expect-error complex overload
    queryOrOptions, mayBeOptions);
    const config = useConfig();
    const refresh = useAtomCallback(useCallback((_, set) => {
        for (const { chainId, query } of options) {
            if (query === undefined) {
                return;
            }
            const atoms = getQueryInstructionPayloadAtoms(config, chainId, query).flat();
            for (const atom of atoms) {
                if ("write" in atom.promiseAtom) {
                    set(atom.promiseAtom);
                }
            }
        }
    }, [config, options]));
    return refresh;
}
//# sourceMappingURL=use-query-refresher.js.map