import type { QueryArgument, ChainHookOptions, QueryOptions } from "./types.js";
import { type ChainId, Query } from "@reactive-dot/core";
/**
 * @internal
 */
export declare function useQueryOptions<TChainId extends ChainId | undefined, TQuery extends QueryArgument<TChainId>>(query: TQuery, options?: ChainHookOptions<TChainId>): Array<{
    chainId: ChainId;
    query: Query<any[], any> | undefined;
}>;
/**
 * @internal
 */
export declare function useQueryOptions<TChainIds extends Array<ChainId | undefined>, const TOptions extends {
    [P in keyof TChainIds]: QueryOptions<TChainIds[P]>;
}>(options: TOptions & {
    [P in keyof TChainIds]: QueryOptions<TChainIds[P]>;
}): Array<{
    chainId: ChainId;
    query: Query<any[], any> | undefined;
}>;
//# sourceMappingURL=use-query-options.d.ts.map