import { useNativeTokenAmountFromPlanck } from "./use-native-token-amount.js";
import { useLazyLoadQuery } from "./use-query.js";
import { flatHead } from "@reactive-dot/core/internal.js";
import { spendableBalance } from "@reactive-dot/core/internal/maths.js";
import { useMemo } from "react";
export function useSpendableBalance(addressOrAddresses, { includesExistentialDeposit = false, ...options } = {}) {
    const addresses = Array.isArray(addressOrAddresses)
        ? addressOrAddresses
        : [addressOrAddresses];
    const [existentialDeposit, accounts] = useLazyLoadQuery((builder) => builder.constant("Balances", "ExistentialDeposit").storages("System", "Account", addresses.map((address) => [address])), options);
    const nativeTokenFromPlanck = useNativeTokenAmountFromPlanck(options);
    return useMemo(() => flatHead(accounts.map(({ data: { free, reserved, frozen } }) => nativeTokenFromPlanck(spendableBalance({
        free,
        reserved,
        frozen,
        existentialDeposit,
        includesExistentialDeposit,
    })))), [
        accounts,
        existentialDeposit,
        includesExistentialDeposit,
        nativeTokenFromPlanck,
    ]);
}
//# sourceMappingURL=use-balance.js.map