import type { ChainHookOptions } from "./types.js";
import { type ChainId, Query } from "@reactive-dot/core";
import type { ChainDescriptorOf, QueryInstruction } from "@reactive-dot/core/internal.js";
import type { Getter } from "jotai";
/**
 * Hook for loading queries without suspending.
 *
 * @returns The function to load queries
 */
export declare function useQueryLoader(): ReturnType<(get: Getter) => <TChainId extends ChainId | undefined, TQuery extends (query: Query<[], ChainDescriptorOf<TChainId>>) => Query<QueryInstruction<ChainDescriptorOf<TChainId>>[], ChainDescriptorOf<TChainId>>>(builder: TQuery, options?: ChainHookOptions<TChainId>) => void>;
//# sourceMappingURL=use-query-loader.d.ts.map