import type { ChainHookOptions, QueryArgument, QueryOptions } from "./types.js";
import { type ChainId } from "@reactive-dot/core";
/**
 * Hook for refreshing cached query.
 *
 * @param query - The function to create the query
 * @param options - Additional options
 * @returns The function to refresh the query
 */
export declare function useQueryRefresher<TChainId extends ChainId | undefined, TQuery extends QueryArgument<TChainId>>(query: TQuery, options?: ChainHookOptions<TChainId>): () => void;
/**
 * Hook for refreshing cached query.
 *
 * @param options - The query options
 * @returns The function to refresh the query
 */
export declare function useQueryRefresher<TChainIds extends Array<ChainId | undefined>, const TOptions extends {
    [P in keyof TChainIds]: QueryOptions<TChainIds[P]>;
}>(options: TOptions & {
    [P in keyof TChainIds]: QueryOptions<TChainIds[P]>;
}): () => void;
//# sourceMappingURL=use-query-refresher.d.ts.map