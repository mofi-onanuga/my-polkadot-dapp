import type { ChainHookOptions } from "./types.js";
import type { ChainId } from "@reactive-dot/core";
import { MutationError } from "@reactive-dot/core";
import type { ChainDescriptorOf } from "@reactive-dot/core/internal.js";
import type { PolkadotSigner, Transaction, TxObservable, TypedApi } from "polkadot-api";
type TxOptions<T extends Transaction<any, any, any, any>> = Parameters<TxObservable<T extends Transaction<infer _Args, infer _Pallet, infer _Tx, infer Asset> ? Asset : void>>[1];
/**
 * Hook for sending transactions to chains.
 *
 * @param action - The function to create the transaction
 * @param options - Additional options
 * @returns The current transaction state & submit function
 */
export declare function useMutation<TAction extends (tx: TypedApi<ChainDescriptorOf<TChainId>>["tx"]) => Transaction<any, any, any, any>, TChainId extends ChainId | undefined>(action: TAction, options?: ChainHookOptions<TChainId> & {
    /**
     * Override default signer
     */
    signer?: PolkadotSigner;
    /**
     * Additional transaction options
     */
    txOptions?: TxOptions<ReturnType<TAction>>;
}): [state: import("@reactive-dot/core").AsyncValue<import("polkadot-api").TxEvent, MutationError>, execute: (submitOptions?: {
    signer?: PolkadotSigner;
    txOptions?: TxOptions<ReturnType<TAction>>;
} | undefined) => import("rxjs").Subscription | Promise<void>];
export {};
//# sourceMappingURL=use-mutation.d.ts.map