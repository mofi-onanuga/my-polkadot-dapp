import { idle, MutationError, pending, } from "@reactive-dot/core";
import { useCallback, useState } from "react";
/**
 * @internal
 */
export function useAsyncAction(action) {
    const [state, setState] = useState(idle);
    const execute = useCallback((...args) => {
        const resolve = (value) => setState(value);
        const reject = (reason) => setState(MutationError.from(reason));
        try {
            setState(pending);
            const result = action(...args);
            if (result instanceof Promise) {
                return result.then(resolve).catch(reject);
            }
            else {
                return result.subscribe({ next: resolve, error: reject });
            }
        }
        catch (error) {
            const mutationError = MutationError.from(error);
            setState(mutationError);
            throw mutationError;
        }
    }, [action, setState]);
    return [state, execute];
}
//# sourceMappingURL=use-async-action.js.map