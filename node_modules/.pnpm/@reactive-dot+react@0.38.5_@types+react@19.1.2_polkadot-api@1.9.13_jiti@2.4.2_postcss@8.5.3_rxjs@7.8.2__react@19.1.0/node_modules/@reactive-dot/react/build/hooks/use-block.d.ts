import type { ChainHookOptions } from "./types.js";
import { type Config } from "@reactive-dot/core";
/**
 * Hook for fetching information about the latest block.
 *
 * @param tag - Which block to target
 * @param options - Additional options
 * @returns The latest finalized or best block
 */
export declare function useBlock(tag?: "best" | "finalized", options?: ChainHookOptions): import("@polkadot-api/observable-client").BlockInfo;
/**
 * @internal
 */
export declare const finalizedBlockAtom: import("../utils/jotai/atom-family.js").AtomFamily<[config: Config, chainId: string | number], {
    observableAtom: import("jotai").Atom<import("@polkadot-api/observable-client").BlockInfo | Promise<import("@polkadot-api/observable-client").BlockInfo>>;
    promiseAtom: import("jotai").Atom<import("@polkadot-api/observable-client").BlockInfo | Promise<import("@polkadot-api/observable-client").BlockInfo>>;
}>;
/**
 * @internal
 */
export declare const bestBlockAtom: import("../utils/jotai/atom-family.js").AtomFamily<[config: Config, chainId: string | number], {
    observableAtom: import("jotai").Atom<import("@polkadot-api/observable-client").BlockInfo | Promise<import("@polkadot-api/observable-client").BlockInfo>>;
    promiseAtom: import("jotai").Atom<import("@polkadot-api/observable-client").BlockInfo | Promise<import("@polkadot-api/observable-client").BlockInfo>>;
}>;
//# sourceMappingURL=use-block.d.ts.map