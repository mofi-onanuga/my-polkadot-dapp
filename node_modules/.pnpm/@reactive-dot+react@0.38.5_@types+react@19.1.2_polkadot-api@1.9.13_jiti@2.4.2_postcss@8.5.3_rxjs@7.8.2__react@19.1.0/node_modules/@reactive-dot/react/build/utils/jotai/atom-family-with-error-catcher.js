import { atomFamily } from "./atom-family.js";
import { atom } from "jotai";
export const atomFamilyErrorsAtom = atom(() => new Set());
export function atomFamilyWithErrorCatcher(initializeAtom, getKey) {
    const baseAtomFamily = atomFamily((...args) => {
        const withErrorCatcher = (childAtom) => {
            const read = (get) => {
                try {
                    const value = get(childAtom);
                    if (!(value instanceof Promise)) {
                        return value;
                    }
                    return value.catch((error) => {
                        get(atomFamilyErrorsAtom).add({
                            atomFamily: baseAtomFamily,
                            args,
                        });
                        throw error;
                    });
                }
                catch (error) {
                    get(atomFamilyErrorsAtom).add({
                        atomFamily: baseAtomFamily,
                        args,
                    });
                    throw error;
                }
            };
            return "write" in childAtom
                ? atom(read, (_, set, ...args) => set(childAtom, ...args))
                : atom(read);
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return initializeAtom(withErrorCatcher, ...args);
    }, getKey);
    return baseAtomFamily;
}
//# sourceMappingURL=atom-family-with-error-catcher.js.map