import { atomWithObservable } from "./atom-with-observable.js";
import { atom } from "jotai";
import { withAtomEffect } from "jotai-effect";
import { firstValueFrom, shareReplay } from "rxjs";
const empty = Symbol("empty");
export function atomWithObservableAndPromise(getObservable, enhanceAtom = ((atomCreator) => atomCreator)) {
    const sourceObservable = atom((get) => getObservable(get).pipe(shareReplay({ bufferSize: 1, refCount: true })));
    const dataAtom = atom({ value: empty });
    const initialDataAtom = atom({
        value: empty,
    });
    const observableAtom = withAtomEffect(enhanceAtom(atom((get) => {
        const initialData = get(initialDataAtom);
        return get(atomWithObservable((get) => get(sourceObservable), initialData.value === empty
            ? undefined
            : { initialValue: initialData.value }));
    })), (get, set) => {
        try {
            set(dataAtom, { value: get(observableAtom) });
        }
        catch (error) {
            set(dataAtom, { error });
        }
    });
    const promiseAtom = enhanceAtom(atom((get) => {
        const data = get(dataAtom);
        if ("error" in data) {
            throw data.error;
        }
        if (data.value !== empty) {
            return data.value;
        }
        const initialData = get(initialDataAtom);
        return firstValueFrom(get(sourceObservable)).then((value) => {
            initialData.value = value;
            return value;
        });
    }));
    return { promiseAtom, observableAtom };
}
//# sourceMappingURL=atom-with-observable-and-promise.js.map