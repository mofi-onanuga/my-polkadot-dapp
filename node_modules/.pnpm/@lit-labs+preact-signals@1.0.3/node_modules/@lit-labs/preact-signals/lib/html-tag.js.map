{"version":3,"file":"html-tag.js","sources":["../src/lib/html-tag.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {\n  html as coreHtml,\n  svg as coreSvg,\n  type TemplateResult,\n} from 'lit/html.js';\n\nimport {watch} from './watch.js';\nimport {Signal} from '@preact/signals-core';\n\n/**\n * Wraps a lit-html template tag function (`html` or `svg`) to add support for\n * automatically wrapping Signal instances in the `watch()` directive.\n */\nexport const withWatch =\n  (coreTag: typeof coreHtml | typeof coreSvg) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    // TODO (justinfagnani): use an alternative to instanceof when\n    // one is available. See https://github.com/preactjs/signals/issues/402\n    return coreTag(\n      strings,\n      ...values.map((v) => (v instanceof Signal ? watch(v) : v))\n    );\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes signal watching support from `withWatch()`.\n */\nexport const html = withWatch(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes signal watching support from `withWatch()`.\n */\nexport const svg = withWatch(coreSvg);\n"],"names":["withWatch","coreTag","strings","values","map","v","Signal","watch","html","coreHtml","svg","coreSvg"],"mappings":";;;;;GAkBO,MAAMA,EACVC,GACD,CAACC,KAAkCC,IAG1BF,EACLC,KACGC,EAAOC,KAAKC,GAAOA,aAAaC,EAASC,EAAMF,GAAKA,KAUhDG,EAAOR,EAAUS,GAQjBC,EAAMV,EAAUW"}