{"version":3,"file":"ledger-signer.mjs","sources":["../../src/ledger-signer.ts"],"sourcesContent":["import type Transport from \"@ledgerhq/hw-transport\"\nimport { merkleizeMetadata } from \"@polkadot-api/merkleize-metadata\"\nimport type { PolkadotSigner } from \"@polkadot-api/polkadot-signer\"\nimport { Binary, u16, u32 } from \"@polkadot-api/substrate-bindings\"\nimport { mergeUint8 } from \"@polkadot-api/utils\"\nimport { getMetadata } from \"./get-metadata\"\nimport { CLA, DEFAULT_SS58, INS, P1, P2 } from \"./consts\"\nimport { getSignBytes, createV4Tx } from \"@polkadot-api/signers-common\"\n\nconst METADATA_IDENTIFIER = \"CheckMetadataHash\"\n\n// 44'/354'\nconst START_PATH = Uint8Array.from([44, 0, 0, 128, 98, 1, 0, 128])\n// 0'\nconst MID_PATH = Uint8Array.from([0, 0, 0, 128])\nconst HARDENED = 0x80000000 // 1 << 31\nconst encodePath = (path1: number, path2: number) => {\n  // ensure numbers are positive integers and fit in 31 bits\n  if (\n    !Number.isInteger(path1) ||\n    path1 < 0 ||\n    path1 >= HARDENED ||\n    !Number.isInteger(path2) ||\n    path2 < 0 ||\n    path2 >= HARDENED\n  )\n    throw new Error(`Invalid path segments ${path1}, ${path2}`)\n\n  return mergeUint8(\n    START_PATH,\n    u32.enc(HARDENED + path1),\n    MID_PATH,\n    u32.enc(HARDENED + path2),\n  )\n}\n\nconst getPubkeyMapKey = (path1: number, path2: number): string => {\n  return `${path1}:${path2}`\n}\n\n/**\n * ATTENTION: This class requires `Buffer` to be available. This is an Ledger\n * requirement that we need to fulfill. If you are on a browser-based\n * environment, make sure you polyfill it.\n */\nexport class LedgerSigner {\n  #transport: Transport\n  #pubkeys: Map<string, Uint8Array> // `${path1}:${path2}`\n  #deviceId: number | undefined\n\n  constructor(transport: Transport) {\n    this.#transport = transport\n    this.#pubkeys = new Map()\n  }\n\n  async #send(\n    ...params: Parameters<Transport[\"send\"]>\n  ): ReturnType<Transport[\"send\"]> {\n    while (this.#transport.exchangeBusyPromise)\n      await this.#transport.exchangeBusyPromise\n    return await this.#transport.send(...params)\n  }\n\n  async #safeSend(\n    ...params: Parameters<Transport[\"send\"]>\n  ): ReturnType<Transport[\"send\"]> {\n    const { appName, appVersion } = await this.appInfo()\n    if (appName !== \"Polkadot\") throw new Error(\"Polkadot App is not opened\")\n    // from version 100 it is Polkadot Generic App\n    if (Number.parseInt(appVersion.split(\".\")[0]) < 100)\n      throw new Error(`Polkadot App version ${appVersion} not expected`)\n\n    return await this.#send(...params)\n  }\n\n  /**\n   * Retrieve running app from device.\n   *\n   * This call prevents race conditions and waits until the device is free to\n   * receive new messages.\n   *\n   * @returns App name and version.\n   * @throws This could throw if the device is not connected, locked, etc.\n   */\n  async appInfo(): Promise<{\n    appName: string\n    appVersion: string\n  }> {\n    // this message is common among Ledger, not only Polkadot app\n    const res = Uint8Array.from(await this.#send(0xb0, 1, 0, 0))\n    const appName = Binary.fromBytes(res.slice(2, 2 + res[1])).asText()\n    const appVersion = Binary.fromBytes(\n      res.slice(2 + res[1] + 1, 2 + res[1] + 1 + res[2 + res[1]]),\n    ).asText()\n    return { appName, appVersion }\n  }\n\n  /**\n   * Get unique identifier of the seed phrase. It is useful to uniquely identify\n   * each device/seed that is connected.\n   *\n   * This call prevents race conditions and waits until the device is free to\n   * receive new messages.\n   *\n   * @returns DeviceId.\n   * @throws This could throw if the device is not connected, locked, in a\n   *         different app than Polkadot, etc.\n   */\n  async deviceId(): Promise<number> {\n    return this.#deviceId == null\n      ? (this.#deviceId = u32.dec((await this.#getPublicKey(0, 0)).slice(0, 4)))\n      : this.#deviceId\n  }\n\n  async #getPublicKey(\n    path1: number,\n    path2: number,\n    seeAddressInDevice?: boolean,\n    ss58Prefix?: number,\n  ): Promise<Uint8Array> {\n    const key = getPubkeyMapKey(path1, path2)\n    if (!seeAddressInDevice && this.#pubkeys.has(key))\n      return this.#pubkeys.get(key)!\n    if (\n      ss58Prefix != null &&\n      (!Number.isInteger(ss58Prefix) || ss58Prefix < 0 || ss58Prefix >= 1 << 16) // u16 max value\n    )\n      throw new Error(`Invalid ss58Prefix ${ss58Prefix}`)\n    const bufToSend = Buffer.from(\n      // id + ss58 prefix\n      mergeUint8(\n        encodePath(path1, path2),\n        Uint8Array.from(u16.enc(ss58Prefix ?? DEFAULT_SS58)),\n      ),\n    )\n    const res = Uint8Array.from(\n      await this.#safeSend(\n        CLA,\n        INS.getAddress,\n        seeAddressInDevice ? P1.showAddress : P1.getAddress,\n        P2,\n        bufToSend,\n      ),\n    )\n    const pubkey = res.slice(0, 32)\n    this.#pubkeys.set(getPubkeyMapKey(path1, path2), pubkey)\n    return pubkey\n  }\n\n  /**\n   * Get pubkey for a specific derivation path.\n   *\n   * This call prevents race conditions and waits until the device is free to\n   * receive new messages.\n   *\n   * @param path1  Primary derivation index.\n   * @param path2  Secondary derivation index. Defaults to 0.\n   * @returns Public key.\n   * @throws This could throw if the device is not connected, locked, in a\n   *         different app than Polkadot, etc.\n   */\n  async getPubkey(path1: number, path2: number = 0): Promise<Uint8Array> {\n    return await this.#getPublicKey(path1, path2)\n  }\n\n  /**\n   * Show address in device's screen.\n   *\n   * This call prevents race conditions and waits until the device is free to\n   * receive new messages.\n   *\n   * @param ss58Prefix  SS58 prefix for address formatting.\n   * @param path1       Primary derivation index.\n   * @param path2       Secondary derivation index. Defaults to 0.\n   * @returns Public key.\n   * @throws This could throw if the device is not connected, locked, in a\n   *         different app than Polkadot, etc.\n   */\n  async seeAddressInDevice(\n    ss58Prefix: number,\n    path1: number,\n    path2: number = 0,\n  ): Promise<Uint8Array> {\n    return await this.#getPublicKey(path1, path2, true, ss58Prefix)\n  }\n\n  async #sign(\n    path1: number,\n    path2: number,\n    payload: Uint8Array,\n    // without shortMetadata indicates signBytes\n    shortMetadata?: Uint8Array,\n  ): Promise<Uint8Array> {\n    const path = encodePath(path1, path2)\n    const chunks: Buffer[] = []\n    chunks.push(Buffer.from(mergeUint8(path, u16.enc(payload.length))))\n    const combinedPayload =\n      shortMetadata == null ? payload : mergeUint8(payload, shortMetadata)\n    let offset = 0\n    while (offset < combinedPayload.length) {\n      const chunkEnd = Math.min(offset + 250, combinedPayload.length)\n      chunks.push(Buffer.from(combinedPayload.slice(offset, chunkEnd)))\n      offset = chunkEnd\n    }\n    let result\n    for (let i = 0; i < chunks.length; i++) {\n      result = await this.#safeSend(\n        CLA,\n        shortMetadata == null ? INS.signRaw : INS.signTx,\n        i === 0 ? P1.init : i === chunks.length - 1 ? P1.end : P1.continue,\n        P2,\n        chunks[i],\n      )\n    }\n    if (result == null) throw null\n\n    // remove return code\n    return Uint8Array.from(result).slice(0, result.length - 2)\n  }\n\n  /**\n   * Create PolkadotSigner object from a specific derivation path and for a\n   * specific network.\n   *\n   * This call prevents race conditions and waits until the device is free to\n   * receive new messages.\n   *\n   * @param networkInfo  Off-chain info required to sign transactions. This\n   *                     makes this object be network-specific.\n   * @param path1        Primary derivation index.\n   * @param path2        Secondary derivation index. Defaults to 0.\n   * @returns PolkadotSigner object.\n   * @throws This could throw if the device is not connected, locked, in a\n   *         different app than Polkadot, etc.\n   */\n  async getPolkadotSigner(\n    networkInfo: { decimals: number; tokenSymbol: string },\n    path1: number,\n    path2: number = 0,\n  ): Promise<PolkadotSigner> {\n    const publicKey = await this.#getPublicKey(path1, path2)\n    const signTx: PolkadotSigner[\"signTx\"] = async (\n      callData,\n      signedExtensions,\n      metadata,\n    ) => {\n      const merkleizer = merkleizeMetadata(metadata, networkInfo)\n      const digest = merkleizer.digest()\n      const v15 = getMetadata(metadata)\n      if (\n        v15.extrinsic.signedExtensions.find(\n          ({ identifier }) => identifier === METADATA_IDENTIFIER,\n        ) == null\n      )\n        throw new Error(\"No `CheckMetadataHash` sigExt found\")\n      const extra: Array<Uint8Array> = []\n      const additionalSigned: Array<Uint8Array> = []\n      v15.extrinsic.signedExtensions.map(({ identifier }) => {\n        if (identifier === METADATA_IDENTIFIER) {\n          extra.push(Uint8Array.from([1]))\n          additionalSigned.push(mergeUint8(Uint8Array.from([1]), digest))\n          return\n        }\n        const signedExtension = signedExtensions[identifier]\n        if (!signedExtension)\n          throw new Error(`Missing ${identifier} signed extension`)\n        extra.push(signedExtension.value)\n        additionalSigned.push(signedExtension.additionalSigned)\n      })\n      const toSign = mergeUint8(callData, ...extra, ...additionalSigned)\n      const signature = await this.#sign(\n        path1,\n        path2,\n        toSign,\n        merkleizer.getProofForExtrinsicPayload(toSign),\n      )\n      return createV4Tx(v15, publicKey, signature, extra, callData)\n    }\n\n    return {\n      publicKey,\n      signTx,\n      signBytes: getSignBytes(async (x) =>\n        // the signature includes a \"0x00\" at the beginning, indicating a ed25519 signature\n        // this is not needed for non-extrinsic signatures\n        (await this.#sign(path1, path2, x)).slice(1),\n      ),\n    }\n  }\n}\n"],"names":[],"mappings":"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"}