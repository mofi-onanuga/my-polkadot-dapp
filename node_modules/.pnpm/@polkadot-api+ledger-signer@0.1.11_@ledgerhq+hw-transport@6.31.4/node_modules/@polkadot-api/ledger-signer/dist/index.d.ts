import { PolkadotSigner } from '@polkadot-api/polkadot-signer';
export { PolkadotSigner } from '@polkadot-api/polkadot-signer';
import Transport from '@ledgerhq/hw-transport';

/**
 * ATTENTION: This class requires `Buffer` to be available. This is an Ledger
 * requirement that we need to fulfill. If you are on a browser-based
 * environment, make sure you polyfill it.
 */
declare class LedgerSigner {
    #private;
    constructor(transport: Transport);
    /**
     * Retrieve running app from device.
     *
     * This call prevents race conditions and waits until the device is free to
     * receive new messages.
     *
     * @returns App name and version.
     * @throws This could throw if the device is not connected, locked, etc.
     */
    appInfo(): Promise<{
        appName: string;
        appVersion: string;
    }>;
    /**
     * Get unique identifier of the seed phrase. It is useful to uniquely identify
     * each device/seed that is connected.
     *
     * This call prevents race conditions and waits until the device is free to
     * receive new messages.
     *
     * @returns DeviceId.
     * @throws This could throw if the device is not connected, locked, in a
     *         different app than Polkadot, etc.
     */
    deviceId(): Promise<number>;
    /**
     * Get pubkey for a specific derivation path.
     *
     * This call prevents race conditions and waits until the device is free to
     * receive new messages.
     *
     * @param path1  Primary derivation index.
     * @param path2  Secondary derivation index. Defaults to 0.
     * @returns Public key.
     * @throws This could throw if the device is not connected, locked, in a
     *         different app than Polkadot, etc.
     */
    getPubkey(path1: number, path2?: number): Promise<Uint8Array>;
    /**
     * Show address in device's screen.
     *
     * This call prevents race conditions and waits until the device is free to
     * receive new messages.
     *
     * @param ss58Prefix  SS58 prefix for address formatting.
     * @param path1       Primary derivation index.
     * @param path2       Secondary derivation index. Defaults to 0.
     * @returns Public key.
     * @throws This could throw if the device is not connected, locked, in a
     *         different app than Polkadot, etc.
     */
    seeAddressInDevice(ss58Prefix: number, path1: number, path2?: number): Promise<Uint8Array>;
    /**
     * Create PolkadotSigner object from a specific derivation path and for a
     * specific network.
     *
     * This call prevents race conditions and waits until the device is free to
     * receive new messages.
     *
     * @param networkInfo  Off-chain info required to sign transactions. This
     *                     makes this object be network-specific.
     * @param path1        Primary derivation index.
     * @param path2        Secondary derivation index. Defaults to 0.
     * @returns PolkadotSigner object.
     * @throws This could throw if the device is not connected, locked, in a
     *         different app than Polkadot, etc.
     */
    getPolkadotSigner(networkInfo: {
        decimals: number;
        tokenSymbol: string;
    }, path1: number, path2?: number): Promise<PolkadotSigner>;
}

export { LedgerSigner };
